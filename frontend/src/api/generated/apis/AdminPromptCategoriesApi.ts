//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePromptCategoryDto,
  PromptCategoryResponseDto,
  PromptCategoryWithCountResponseDto,
  UpdatePromptCategoryDto,
} from '../models/index';
import {
    CreatePromptCategoryDtoFromJSON,
    CreatePromptCategoryDtoToJSON,
    PromptCategoryResponseDtoFromJSON,
    PromptCategoryResponseDtoToJSON,
    PromptCategoryWithCountResponseDtoFromJSON,
    PromptCategoryWithCountResponseDtoToJSON,
    UpdatePromptCategoryDtoFromJSON,
    UpdatePromptCategoryDtoToJSON,
} from '../models/index';

export interface AdminPromptCategoriesControllerCreateRequest {
    createPromptCategoryDto: CreatePromptCategoryDto;
}

export interface AdminPromptCategoriesControllerDeleteRequest {
    id: number;
}

export interface AdminPromptCategoriesControllerFindOneRequest {
    id: number;
}

export interface AdminPromptCategoriesControllerUpdateRequest {
    id: number;
    updatePromptCategoryDto: UpdatePromptCategoryDto;
}

/**
 * 
 */
export class AdminPromptCategoriesApi extends runtime.BaseAPI {

    /**
     * Create a new prompt category
     */
    async adminPromptCategoriesControllerCreateRaw(requestParameters: AdminPromptCategoriesControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptCategoryResponseDto>> {
        if (requestParameters['createPromptCategoryDto'] == null) {
            throw new runtime.RequiredError(
                'createPromptCategoryDto',
                'Required parameter "createPromptCategoryDto" was null or undefined when calling adminPromptCategoriesControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/admin/prompt-categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePromptCategoryDtoToJSON(requestParameters['createPromptCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptCategoryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new prompt category
     */
    async adminPromptCategoriesControllerCreate(createPromptCategoryDto: CreatePromptCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptCategoryResponseDto> {
        const response = await this.adminPromptCategoriesControllerCreateRaw({ createPromptCategoryDto: createPromptCategoryDto }, initOverrides);
        return await response.value();
    }

    /**
     * Delete category
     */
    async adminPromptCategoriesControllerDeleteRaw(requestParameters: AdminPromptCategoriesControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminPromptCategoriesControllerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/prompt-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete category
     */
    async adminPromptCategoriesControllerDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminPromptCategoriesControllerDeleteRaw({ id: id }, initOverrides);
    }

    /**
     * Get all prompt categories
     */
    async adminPromptCategoriesControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PromptCategoryResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/prompt-categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptCategoryResponseDtoFromJSON));
    }

    /**
     * Get all prompt categories
     */
    async adminPromptCategoriesControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PromptCategoryResponseDto>> {
        const response = await this.adminPromptCategoriesControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all categories with prompt counts
     */
    async adminPromptCategoriesControllerFindAllWithCountsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PromptCategoryWithCountResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/prompt-categories/with-counts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PromptCategoryWithCountResponseDtoFromJSON));
    }

    /**
     * Get all categories with prompt counts
     */
    async adminPromptCategoriesControllerFindAllWithCounts(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PromptCategoryWithCountResponseDto>> {
        const response = await this.adminPromptCategoriesControllerFindAllWithCountsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get category by ID
     */
    async adminPromptCategoriesControllerFindOneRaw(requestParameters: AdminPromptCategoriesControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptCategoryResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminPromptCategoriesControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/admin/prompt-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptCategoryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get category by ID
     */
    async adminPromptCategoriesControllerFindOne(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptCategoryResponseDto> {
        const response = await this.adminPromptCategoriesControllerFindOneRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Update category
     */
    async adminPromptCategoriesControllerUpdateRaw(requestParameters: AdminPromptCategoriesControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptCategoryResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling adminPromptCategoriesControllerUpdate().'
            );
        }

        if (requestParameters['updatePromptCategoryDto'] == null) {
            throw new runtime.RequiredError(
                'updatePromptCategoryDto',
                'Required parameter "updatePromptCategoryDto" was null or undefined when calling adminPromptCategoriesControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/admin/prompt-categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePromptCategoryDtoToJSON(requestParameters['updatePromptCategoryDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptCategoryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Update category
     */
    async adminPromptCategoriesControllerUpdate(id: number, updatePromptCategoryDto: UpdatePromptCategoryDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptCategoryResponseDto> {
        const response = await this.adminPromptCategoriesControllerUpdateRaw({ id: id, updatePromptCategoryDto: updatePromptCategoryDto }, initOverrides);
        return await response.value();
    }

}
