//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreatePromptDto,
  PromptResponseDto,
  UpdatePromptDto,
} from '../models/index';
import {
    CreatePromptDtoFromJSON,
    CreatePromptDtoToJSON,
    PromptResponseDtoFromJSON,
    PromptResponseDtoToJSON,
    UpdatePromptDtoFromJSON,
    UpdatePromptDtoToJSON,
} from '../models/index';

export interface PromptsControllerCloneRequest {
    id: number;
}

export interface PromptsControllerCreateRequest {
    createPromptDto: CreatePromptDto;
}

export interface PromptsControllerDeleteRequest {
    id: number;
}

export interface PromptsControllerFindAllRequest {
    categoryId: number;
    search: string;
    minRating: number;
    page: number;
    limit: number;
    sortBy: string;
    sortOrder: string;
}

export interface PromptsControllerFindMyRequest {
    page: number;
    limit: number;
    sortBy: string;
    sortOrder: string;
}

export interface PromptsControllerFindOneRequest {
    id: number;
}

export interface PromptsControllerGetPopularRequest {
    limit: number;
}

export interface PromptsControllerGetRecentRequest {
    limit: number;
}

export interface PromptsControllerGetVersionRequest {
    id: number;
    version: number;
}

export interface PromptsControllerGetVersionsRequest {
    id: number;
}

export interface PromptsControllerRecordUsageRequest {
    id: number;
}

export interface PromptsControllerRestoreVersionRequest {
    id: number;
    version: number;
}

export interface PromptsControllerToggleVisibilityRequest {
    id: number;
}

export interface PromptsControllerUpdateRequest {
    id: number;
    updatePromptDto: UpdatePromptDto;
}

/**
 * 
 */
export class PromptsApi extends runtime.BaseAPI {

    /**
     * Clone a prompt
     */
    async promptsControllerCloneRaw(requestParameters: PromptsControllerCloneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerClone().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/clone`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clone a prompt
     */
    async promptsControllerClone(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerCloneRaw({ id: id }, initOverrides);
    }

    /**
     * Create a new prompt
     */
    async promptsControllerCreateRaw(requestParameters: PromptsControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponseDto>> {
        if (requestParameters['createPromptDto'] == null) {
            throw new runtime.RequiredError(
                'createPromptDto',
                'Required parameter "createPromptDto" was null or undefined when calling promptsControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/prompts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePromptDtoToJSON(requestParameters['createPromptDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create a new prompt
     */
    async promptsControllerCreate(createPromptDto: CreatePromptDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponseDto> {
        const response = await this.promptsControllerCreateRaw({ createPromptDto: createPromptDto }, initOverrides);
        return await response.value();
    }

    /**
     * Delete prompt
     */
    async promptsControllerDeleteRaw(requestParameters: PromptsControllerDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete prompt
     */
    async promptsControllerDelete(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerDeleteRaw({ id: id }, initOverrides);
    }

    /**
     * Get all public prompts and own private prompts
     */
    async promptsControllerFindAllRaw(requestParameters: PromptsControllerFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['search'] == null) {
            throw new runtime.RequiredError(
                'search',
                'Required parameter "search" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['minRating'] == null) {
            throw new runtime.RequiredError(
                'minRating',
                'Required parameter "minRating" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling promptsControllerFindAll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['categoryId'] != null) {
            queryParameters['categoryId'] = requestParameters['categoryId'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['minRating'] != null) {
            queryParameters['minRating'] = requestParameters['minRating'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all public prompts and own private prompts
     */
    async promptsControllerFindAll(categoryId: number, search: string, minRating: number, page: number, limit: number, sortBy: string, sortOrder: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerFindAllRaw({ categoryId: categoryId, search: search, minRating: minRating, page: page, limit: limit, sortBy: sortBy, sortOrder: sortOrder }, initOverrides);
    }

    /**
     * Get current user prompts
     */
    async promptsControllerFindMyRaw(requestParameters: PromptsControllerFindMyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['page'] == null) {
            throw new runtime.RequiredError(
                'page',
                'Required parameter "page" was null or undefined when calling promptsControllerFindMy().'
            );
        }

        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling promptsControllerFindMy().'
            );
        }

        if (requestParameters['sortBy'] == null) {
            throw new runtime.RequiredError(
                'sortBy',
                'Required parameter "sortBy" was null or undefined when calling promptsControllerFindMy().'
            );
        }

        if (requestParameters['sortOrder'] == null) {
            throw new runtime.RequiredError(
                'sortOrder',
                'Required parameter "sortOrder" was null or undefined when calling promptsControllerFindMy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sortBy'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sortOrder'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/my`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get current user prompts
     */
    async promptsControllerFindMy(page: number, limit: number, sortBy: string, sortOrder: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerFindMyRaw({ page: page, limit: limit, sortBy: sortBy, sortOrder: sortOrder }, initOverrides);
    }

    /**
     * Get prompt by ID
     */
    async promptsControllerFindOneRaw(requestParameters: PromptsControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get prompt by ID
     */
    async promptsControllerFindOne(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptResponseDto> {
        const response = await this.promptsControllerFindOneRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get popular prompts
     */
    async promptsControllerGetPopularRaw(requestParameters: PromptsControllerGetPopularRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling promptsControllerGetPopular().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/popular`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get popular prompts
     */
    async promptsControllerGetPopular(limit: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerGetPopularRaw({ limit: limit }, initOverrides);
    }

    /**
     * Get recent prompts
     */
    async promptsControllerGetRecentRaw(requestParameters: PromptsControllerGetRecentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['limit'] == null) {
            throw new runtime.RequiredError(
                'limit',
                'Required parameter "limit" was null or undefined when calling promptsControllerGetRecent().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/recent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get recent prompts
     */
    async promptsControllerGetRecent(limit: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerGetRecentRaw({ limit: limit }, initOverrides);
    }

    /**
     * Get specific version of a prompt
     */
    async promptsControllerGetVersionRaw(requestParameters: PromptsControllerGetVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerGetVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling promptsControllerGetVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/versions/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get specific version of a prompt
     */
    async promptsControllerGetVersion(id: number, version: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerGetVersionRaw({ id: id, version: version }, initOverrides);
    }

    /**
     * Get all versions of a prompt
     */
    async promptsControllerGetVersionsRaw(requestParameters: PromptsControllerGetVersionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerGetVersions().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/versions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get all versions of a prompt
     */
    async promptsControllerGetVersions(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerGetVersionsRaw({ id: id }, initOverrides);
    }

    /**
     * Record prompt usage
     */
    async promptsControllerRecordUsageRaw(requestParameters: PromptsControllerRecordUsageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerRecordUsage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/use`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Record prompt usage
     */
    async promptsControllerRecordUsage(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerRecordUsageRaw({ id: id }, initOverrides);
    }

    /**
     * Restore a specific version of a prompt
     */
    async promptsControllerRestoreVersionRaw(requestParameters: PromptsControllerRestoreVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerRestoreVersion().'
            );
        }

        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling promptsControllerRestoreVersion().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/restore/{version}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Restore a specific version of a prompt
     */
    async promptsControllerRestoreVersion(id: number, version: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerRestoreVersionRaw({ id: id, version: version }, initOverrides);
    }

    /**
     * Toggle prompt visibility (public/private)
     */
    async promptsControllerToggleVisibilityRaw(requestParameters: PromptsControllerToggleVisibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerToggleVisibility().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/prompts/{id}/visibility`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Toggle prompt visibility (public/private)
     */
    async promptsControllerToggleVisibility(id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerToggleVisibilityRaw({ id: id }, initOverrides);
    }

    /**
     * Update prompt (creates new version)
     */
    async promptsControllerUpdateRaw(requestParameters: PromptsControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling promptsControllerUpdate().'
            );
        }

        if (requestParameters['updatePromptDto'] == null) {
            throw new runtime.RequiredError(
                'updatePromptDto',
                'Required parameter "updatePromptDto" was null or undefined when calling promptsControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/prompts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePromptDtoToJSON(requestParameters['updatePromptDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update prompt (creates new version)
     */
    async promptsControllerUpdate(id: number, updatePromptDto: UpdatePromptDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.promptsControllerUpdateRaw({ id: id, updatePromptDto: updatePromptDto }, initOverrides);
    }

}
