//@ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * c4 GenAI Suite
 * c4 GenAI Suite
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PromptCategoryResponseDto } from './PromptCategoryResponseDto';
import {
    PromptCategoryResponseDtoFromJSON,
    PromptCategoryResponseDtoFromJSONTyped,
    PromptCategoryResponseDtoToJSON,
} from './PromptCategoryResponseDto';
import type { PromptAuthorResponseDto } from './PromptAuthorResponseDto';
import {
    PromptAuthorResponseDtoFromJSON,
    PromptAuthorResponseDtoFromJSONTyped,
    PromptAuthorResponseDtoToJSON,
} from './PromptAuthorResponseDto';

/**
 * 
 * @export
 * @interface PromptResponseDto
 */
export interface PromptResponseDto {
    /**
     * Unique identifier for the prompt
     * @type {number}
     * @memberof PromptResponseDto
     */
    id: number;
    /**
     * Title of the prompt
     * @type {string}
     * @memberof PromptResponseDto
     */
    title: string;
    /**
     * Content/template of the prompt
     * @type {string}
     * @memberof PromptResponseDto
     */
    content: string;
    /**
     * Description of what the prompt does
     * @type {string}
     * @memberof PromptResponseDto
     */
    description?: string;
    /**
     * Whether the prompt is publicly visible
     * @type {boolean}
     * @memberof PromptResponseDto
     */
    isPublic: boolean;
    /**
     * Average rating of the prompt
     * @type {number}
     * @memberof PromptResponseDto
     */
    averageRating?: number;
    /**
     * Number of ratings received
     * @type {number}
     * @memberof PromptResponseDto
     */
    ratingCount?: number;
    /**
     * Number of times the prompt has been used
     * @type {number}
     * @memberof PromptResponseDto
     */
    usageCount?: number;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof PromptResponseDto
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof PromptResponseDto
     */
    updatedAt: Date;
    /**
     * Category this prompt belongs to
     * @type {PromptCategoryResponseDto}
     * @memberof PromptResponseDto
     */
    category?: PromptCategoryResponseDto;
    /**
     * Author of the prompt
     * @type {PromptAuthorResponseDto}
     * @memberof PromptResponseDto
     */
    author?: PromptAuthorResponseDto;
}

/**
 * Check if a given object implements the PromptResponseDto interface.
 */
export function instanceOfPromptResponseDto(value: object): value is PromptResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('isPublic' in value) || value['isPublic'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function PromptResponseDtoFromJSON(json: any): PromptResponseDto {
    return PromptResponseDtoFromJSONTyped(json, false);
}

export function PromptResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): PromptResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'content': json['content'],
        'description': json['description'] == null ? undefined : json['description'],
        'isPublic': json['isPublic'],
        'averageRating': json['averageRating'] == null ? undefined : json['averageRating'],
        'ratingCount': json['ratingCount'] == null ? undefined : json['ratingCount'],
        'usageCount': json['usageCount'] == null ? undefined : json['usageCount'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'category': json['category'] == null ? undefined : PromptCategoryResponseDtoFromJSON(json['category']),
        'author': json['author'] == null ? undefined : PromptAuthorResponseDtoFromJSON(json['author']),
    };
}

export function PromptResponseDtoToJSON(value?: PromptResponseDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'id': value['id'],
        'title': value['title'],
        'content': value['content'],
        'description': value['description'],
        'isPublic': value['isPublic'],
        'averageRating': value['averageRating'],
        'ratingCount': value['ratingCount'],
        'usageCount': value['usageCount'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'category': PromptCategoryResponseDtoToJSON(value['category']),
        'author': PromptAuthorResponseDtoToJSON(value['author']),
    };
}

